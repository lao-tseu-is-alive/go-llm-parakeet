package llm

import (
	"bytes"
	"encoding/json"
	"errors"
	"io"
	"net/http"
)

/*
https://github.com/ollama/ollama/blob/main/docs/api.md#show-model-information

curl http://localhost:11434/api/show -d '{
  "name": "llama3"
}'

{
  "modelfile": "# Modelfile generated by \"ollama show\"\n# To build a new Modelfile based on this one, replace the FROM line with:\n# FROM llava:latest\n\nFROM /Users/matt/.ollama/models/blobs/sha256:200765e1283640ffbd013184bf496e261032fa75b99498a9613be4e94d63ad52\nTEMPLATE \"\"\"{{ .System }}\nUSER: {{ .Prompt }}\nASSISTANT: \"\"\"\nPARAMETER num_ctx 4096\nPARAMETER stop \"\u003c/s\u003e\"\nPARAMETER stop \"USER:\"\nPARAMETER stop \"ASSISTANT:\"",
  "parameters": "num_ctx                        4096\nstop                           \u003c/s\u003e\nstop                           USER:\nstop                           ASSISTANT:",
  "template": "{{ .System }}\nUSER: {{ .Prompt }}\nASSISTANT: ",
  "details": {
    "format": "gguf",
    "family": "llama",
    "families": ["llama", "clip"],
    "parameter_size": "7B",
    "quantization_level": "Q4_0"
  }
}
*/

type ModelInformation struct {
	Modelfile  string `json:"modelfile"`
	Parameters string `json:"parameters"`
	Template   string `json:"template"`
	Details    struct {
		Format            string   `json:"format"`
		Family            string   `json:"family"`
		Families          []string `json:"families"`
		ParameterSize     string   `json:"parameter_size"`
		QuantizationLevel string   `json:"quantization_level"`
	} `json:"details"`
}

// ShowModelInformation retrieves information about a model from the specified URL.
//
// Parameters:
// - url: the base URL of the API.
// - model: the name of the model to retrieve information for.
//
// Returns:
// - ModelInformation: the information about the model.
// - int: the HTTP status code of the response.
// - error: an error if the request fails.
func ShowModelInformation(url, model string) (ModelInformation, int, error) {

	req, err := http.NewRequest(http.MethodPost, url+"/api/show", bytes.NewBuffer([]byte(`{"name":"`+model+`"}`)))
	if err != nil {
		return ModelInformation{}, http.StatusInternalServerError, err
	}
	req.Header.Set("Content-Type", "application/json; charset=utf-8")

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return ModelInformation{}, http.StatusInternalServerError, err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return ModelInformation{}, resp.StatusCode, errors.New("Error: status code: " + resp.Status)
	}
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return ModelInformation{}, resp.StatusCode, err
	}

	var info ModelInformation
	err = json.Unmarshal(body, &info)
	if err != nil {
		return ModelInformation{}, resp.StatusCode, err
	}
	return info, resp.StatusCode, nil

}

type PullResult struct {
	Status string `json:"status"`
}

// PullModel sends a POST request to the specified URL to pull a model with the given name.
//
// Parameters:
// - url: The URL to send the request to.
// - model: The name of the model to pull.
//
// Returns:
// - PullResult: The result of the pull operation.
// - int: The HTTP status code of the response.
// - error: An error if the request fails.
func PullModel(url, model string) (PullResult, int, error) {

	req, err := http.NewRequest(http.MethodPost, url+"/api/pull", bytes.NewBuffer([]byte(`{"name":"`+model+`","stream":false}`)))
	if err != nil {
		return PullResult{}, http.StatusInternalServerError, err
	}
	req.Header.Set("Content-Type", "application/json; charset=utf-8")

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return PullResult{},http.StatusInternalServerError, err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return PullResult{},resp.StatusCode, errors.New("Error: status code: " + resp.Status)
	}
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return PullResult{},resp.StatusCode, err
	}

	var pullResult PullResult
	err = json.Unmarshal(body, &pullResult)
	if err != nil {
		return PullResult{}, resp.StatusCode, err
	}
	return pullResult, resp.StatusCode, nil

}
// TODO: 
// - make a stream version of pull
// - make a version with token

