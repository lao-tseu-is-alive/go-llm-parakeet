// Package squawk provides a simplified interface for interacting with
// generative AI models and embeddings. It is designed to make common
// tasks in generative AI more accessible and easier to work with,
// similar to how jQuery simplified JavaScript development.
//
// The Squawk struct encapsulates various configurations, states, and
// tools required for processing and generating responses from language
// models. It supports functionalities such as setting models, managing
// conversation contexts, handling embeddings, and executing structured
// or streaming outputs.
//
// Key Features:
// - Simplified interaction with language models and embeddings.
// - Support for multiple providers (e.g., OpenAI, Ollama, Docker Model Runner).
// - Flexible configuration options for chat and structured outputs.
// - Tools for managing conversation contexts and embeddings.
// - Callback-based execution for chat and streaming responses.
//
// Usage:
// Squawk can be instantiated using the `New` function, and its methods
// can be chained to configure and execute various operations.
package squawk

/*
"Squawk is the jQuery of generative AI"
Squawk plays a similar role in generative AI that jQuery did for JavaScript.
It simplifies common tasks, making the technology more accessible and easier to work with.
*/

import (
	"github.com/parakeet-nest/parakeet/embeddings"
	"github.com/parakeet-nest/parakeet/enums/provider"
	"github.com/parakeet-nest/parakeet/llm"
)

// Squawk represents the core structure for managing interactions with
// language models and embeddings. It encapsulates various configurations,
// states, and tools required for processing and generating responses.
//
// Fields:
// - setOfMessages: A collection of messages used in the conversation context.
// - baseUrl: The base URL for the API or service.
// - apiUrl: The specific API endpoint URL.
// - provider: The name of the language model provider (e.g., OpenAI, Anthropic).
// - chatModel: The identifier/name for the chat model being used.
// - embeddingsModel: The identifier/name for the embeddings model being used.
// - options: Configuration options for the language model interactions.
// - openAPIKey: The API key for authenticating with the provider.
// - lastAnswer: The most recent answer generated by the language model.
// - lastError: The most recent error encountered during processing.
// - schema: A map representing the schema for structured output.
//
// Embeddings:
// - vectorStore: A storage mechanism for managing vector embeddings.
// - similarities: A collection of vector records representing similarities.
//
// Tools:
// - tools: A list of tools available for use during processing.
// - toolCalls: A record of tool calls made during processing.
type Squawk struct {
	setOfMessages   []llm.Message
	baseUrl         string
	apiUrl          string
	provider        string
	chatModel       string
	embeddingsModel string
	options         llm.Options
	openAPIKey      string
	lastAnswer      llm.Answer
	lastError       error
	schema          map[string]any // for structured output

	// embeddings
	vectorStore  embeddings.VectorStore
	similarities []llm.VectorRecord

	// tools
	tools     []llm.Tool
	toolCalls []llm.ToolCall
}

// New creates and initializes a new instance of the Squawk struct.
// It sets default values for all fields, including empty slices, strings,
// nil pointers, and default structs. This function is typically used to
// instantiate a Squawk object with its fields properly initialized.
func New() *Squawk {
	s := &Squawk{
		setOfMessages:   []llm.Message{},
		chatModel:       "",
		embeddingsModel: "",
		baseUrl:         "",
		apiUrl:          "",
		provider:        provider.Ollama,
		options:         llm.Options{},
		lastAnswer:      llm.Answer{},
		lastError:       nil,

		vectorStore:  nil,
		similarities: []llm.VectorRecord{},
	}
	return s
}


// Cmd executes a custom command function on the Squawk instance.
// This method allows executing arbitrary operations on the Squawk instance
// while maintaining the method chaining pattern.
//
// Parameters:
//   - callBack: A function that receives a pointer to the current Squawk instance
//     and can perform custom operations on it
//
// Returns:
//   - *Squawk: A pointer to the same Squawk instance for method chaining
//
// Example with Ollama provider:
//
//	squawk := New().
//	  Model("mistral:latest").
//	  Provider(provider.Ollama).
//	  System("You are a Go expert").
//	  Cmd(func(self *Squawk) {
//	      fmt.Printf("Current model: %s\n", self.chatModel)
//	      fmt.Printf("Messages count: %d\n", len(self.Messages()))
//	  }).
//	  User("What is a channel?")
func (s *Squawk) Cmd(callBack func(self *Squawk)) *Squawk {
	callBack(s)
	return s
}

// TODO: tools (+ MCP conversion)
// TODO: add default options ()
